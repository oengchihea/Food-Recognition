from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint

# Define directories for training and validation data
train_dir = 'path_to_train_data'
validation_dir = 'path_to_validation_data'

# Create an ImageDataGenerator for training and validation data
train_datagen = ImageDataGenerator(rescale=1.0/255.0)
validation_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_generator = train_datagen.flow_from_directory(train_dir, 
                                                    target_size=(224, 224), 
                                                    batch_size=32, 
                                                    class_mode='categorical')

validation_generator = validation_datagen.flow_from_directory(validation_dir, 
                                                              target_size=(224, 224), 
                                                              batch_size=32, 
                                                              class_mode='categorical')

# Build a simple model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(len(train_generator.class_indices), activation='softmax')  # len(class_indices) for number of classes
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Define a checkpoint to save the model with the best validation accuracy
checkpoint = ModelCheckpoint('models/food_recognition_model.h5', 
                             monitor='val_accuracy', 
                             save_best_only=True, 
                             verbose=1)

# Train the model
model.fit(train_generator, 
          steps_per_epoch=train_generator.samples // train_generator.batch_size, 
          epochs=10, 
          validation_data=validation_generator, 
          validation_steps=validation_generator.samples // validation_generator.batch_size, 
          callbacks=[checkpoint])

print("Training completed and model saved!")
